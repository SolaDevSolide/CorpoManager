services:
  postgres:
    image: postgres:17.4-alpine
    # inject credentials from .env
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.3
    env_file:
      - .env
    command: >
      sh -c "if [ -n \"$REDIS_PASSWORD\" ]; then
               exec redis-server --requirepass \"$REDIS_PASSWORD\";
             else
               exec redis-server;
             fi"
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    # pick up any backend-specific env plus the DB/Redis creds
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:3001"
# TODO: Implement health endpoint in the backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 5

  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT}:3000"

volumes:
  pgdata: